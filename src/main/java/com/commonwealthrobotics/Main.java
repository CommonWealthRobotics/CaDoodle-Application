/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.commonwealthrobotics;

import java.awt.GraphicsEnvironment;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Optional;

import javax.swing.filechooser.FileSystemView;
import static com.neuronrobotics.bowlerstudio.scripting.DownloadManager.*;

import com.neuronrobotics.bowlerstudio.BowlerKernel;
import com.neuronrobotics.bowlerstudio.BowlerStudio;
import com.neuronrobotics.bowlerstudio.NameGetter;
import com.neuronrobotics.bowlerstudio.PsudoSplash;
import com.neuronrobotics.bowlerstudio.SplashManager;
import com.neuronrobotics.bowlerstudio.assets.AssetFactory;
import com.neuronrobotics.bowlerstudio.assets.ConfigurationDatabase;
import com.neuronrobotics.bowlerstudio.assets.FontSizeManager;
import com.neuronrobotics.bowlerstudio.assets.StudioBuildInfo;
import com.neuronrobotics.bowlerstudio.scripting.DownloadManager;
import com.neuronrobotics.bowlerstudio.scripting.GitHubWebFlow;
import com.neuronrobotics.bowlerstudio.scripting.IApprovalForDownload;
import com.neuronrobotics.bowlerstudio.scripting.IDownloadManagerEvents;
import com.neuronrobotics.bowlerstudio.scripting.PasswordManager;
import com.neuronrobotics.bowlerstudio.scripting.ScriptingEngine;
import com.neuronrobotics.bowlerstudio.scripting.external.GroovyEclipseExternalEditor;
import com.neuronrobotics.bowlerstudio.vitamins.Vitamins;
import com.neuronrobotics.nrconsole.util.FileSelectionFactory;
import com.neuronrobotics.sdk.common.Log;

import eu.mihosoft.vrl.v3d.CSG;
import eu.mihosoft.vrl.v3d.Plane;
import eu.mihosoft.vrl.v3d.Vector3d;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.fxml.FXMLLoader;
import javafx.geometry.Rectangle2D;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.SceneAntialiasing;
import javafx.scene.control.Alert;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Tooltip;
import javafx.scene.image.Image;
import javafx.scene.paint.Color;
import javafx.stage.Stage;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.IOException;
import javax.imageio.ImageIO;
import javafx.application.Platform;
import javafx.stage.Stage;

public class Main extends Application {
	private static Thread loadDeps;

	@Override
	public void start(Stage newStage) throws Exception {
		// SplashManager.renderSplashFrame(1, "Main Window Load");

		FXMLLoader loader = new FXMLLoader(Main.class.getResource("MainWindow.fxml"));
		loader.setController(new MainController());
		Parent root = loader.load();

		double sw = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDisplayMode()
				.getWidth();
		double sh = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDisplayMode()
				.getHeight();
		Rectangle2D primaryScreenBounds = javafx.stage.Screen.getPrimary().getVisualBounds();
		com.neuronrobotics.sdk.common.Log.error("Screen " + sw + "x" + sh);
		sw = primaryScreenBounds.getWidth();
		sh = primaryScreenBounds.getHeight();
		double w;
		double h;
		w = sw - 40;
		h = sh - 40;

		Scene scene = new Scene(root, w, h, true, SceneAntialiasing.BALANCED);
		newStage.setScene(scene);
		String title = StudioBuildInfo.getAppName() + " v " + StudioBuildInfo.getVersion();
		if (newStage != null)
			newStage.setTitle(title);
		newStage.setOnCloseRequest(event -> {
			Platform.exit();
			new Thread(() -> {
				Log.error("CaDoodle Exiting");
				System.exit(0);
			}).start();

		});

//		FontSizeManager.addListener(fontNum ->
//		{
//			int tmp = fontNum - 10;
//			if (tmp < 12)
//				tmp = 12;
//			root.setStyle("-fx-font-size: " + tmp + "pt");
//		});
//		FontSizeManager.setFontSize(12);
		// BowlerStudio.runLater(() -> {
		try {
			// CADoodle-Icon.png
			Image loadAsset = new Image(Main.class.getResource("CADoodle-Icon.png").toString());
			newStage.getIcons().add(loadAsset);
			Image image1 = new Image(Main.class.getResourceAsStream("CADoodle-Icon.png"));
			// or
			Image image2 = new Image(Main.class.getResource("CADoodle-Icon.png").toExternalForm());

			newStage.getIcons().add(image1);
			newStage.getIcons().add(image2);

		} catch (Exception e) {
			e.printStackTrace();
		}
		// });
		newStage.setMinWidth(900);
		newStage.setMinHeight(600);
		// SplashManager.renderSplashFrame(1, "Main Window Show");
		FileSelectionFactory.setStage(newStage);

		newStage.show();
		setupTray(newStage);
		// getLoadDeps().start();
	}

	private void setupTray(Stage stage) {
		// First check if SystemTray is supported
		if (!SystemTray.isSupported()) {
			System.out.println("SystemTray is not supported");
			return;
		}

		try {
			// Get the system tray
			SystemTray tray = SystemTray.getSystemTray();

			// Get tray icon size
			Dimension trayIconSize = tray.getTrayIconSize();

			// Load image for tray icon
			String name = "CADoodle-Icon.png";
			java.awt.Image originalImage = ImageIO.read(Main.class.getResource(name));

			// Create a transparent buffered image
			BufferedImage bufferedImage = new BufferedImage(trayIconSize.width, trayIconSize.height,
					BufferedImage.TYPE_INT_ARGB);

			// Get graphics context
			Graphics g = bufferedImage.getGraphics();

			// Draw the original image to the new one, preserving transparency
			g.drawImage(originalImage, 0, 0, trayIconSize.width , trayIconSize.height , null);
			g.dispose();

			// Create a popup menu
			PopupMenu popup = new PopupMenu();

			// Create menu items
			MenuItem showItem = new MenuItem("Show");
			showItem.addActionListener(e -> Platform.runLater(() -> {
				stage.show();
				stage.setIconified(false);
				stage.toFront();
			}));

			MenuItem exitItem = new MenuItem("Exit");
			exitItem.addActionListener(e -> {
				Platform.exit();
				System.exit(0);
			});

			// Add items to popup menu
			popup.add(showItem);
			popup.addSeparator();
			popup.add(exitItem);

			// Create tray icon with the buffered image that preserves transparency
			TrayIcon trayIcon = new TrayIcon(bufferedImage, "CADoodle", popup);

			// Add icon to system tray
			tray.add(trayIcon);
			System.out.println("Setting transparent tray icon to " + name);

		} catch (AWTException | IOException e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		String relative = ScriptingEngine.getWorkingDirectory().getAbsolutePath();
		File file = new File(relative + delim() + "CaDoodle-workspace" + delim());
		file.mkdirs();
		ScriptingEngine.setWorkspace(file);
		DownloadManager.setSTUDIO_INSTALL("CaDoodle-ApplicationInstall");
		try {
			File jarFile = new File(GroovyEclipseExternalEditor.getApplicationJarPath());
			System.out.println("Application at " + jarFile + " is " + (jarFile.exists() ? "Found" : "Missing!"));
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();

		}

		BowlerKernel.setKernelMode(false);
		if (args != null) {
			if (args.length != 0) {
				File f = new File(args[0].replace('"', ' '));
				System.out.println("Passed In File at "+f.getAbsolutePath());
				if (f.exists()) {
					ConfigurationDatabase.put("CaDoodle", "CaDoodleacriveFile", f.getAbsolutePath());
					System.out.println("Passed In File Exists! ");
					HashSet<String> externals =  Main.getOptionalProjects();
					externals.add(f.getAbsolutePath());
				}else
					System.out.println("Fail! Passed In File Does Not Exists! ");
			}
		}
		Plane.setEPSILON(1.0e-9);
		Vector3d.setEXPORTEPSILON(1.0e-10);
		PsudoSplash.setResource(Main.class.getResource("SourceIcon.png"));
		PsudoSplash.setTrayIcon(Main.class.getResource("CADoodle-Icon.png"));

		PsudoSplash.setTextColor(Color.BLACK);
		PsudoSplash.setVersionX(670);
		PsudoSplash.setVersionY(120);

		PsudoSplash.setLogX(250);
		PsudoSplash.setLogY(400);

		PsudoSplash.setMessageX(400);
		PsudoSplash.setMessageY(250);

		SplashManager.renderSplashFrame(1, "Main Window Show");
		setUpApprovalWindow();
		ScriptingEngine.setAppName("CaDoodle");

		NameGetter mykey = new NameGetter();
		GitHubWebFlow.setName(mykey);
		try {
			PasswordManager.setupAnyonmous();
		} catch (IOException e) {
			// Auto-generated catch block
			e.printStackTrace();
		}
		try {
			ensureGitAssetsArePresent();
		}catch(Throwable t) {
			t.printStackTrace();
		}
		// com.neuronrobotics.sdk.common.Log.enableErrorPrint();
		FontSizeManager.setFontSize(12);

		launch();
	}

	public static HashSet<String> getOptionalProjects() {
		ArrayList<String>l = (ArrayList<String>) ConfigurationDatabase.get("CaDoodle", "CaDoodleExternalOptions", new ArrayList<String>());
		HashSet<String> s= new HashSet<>();
		s.addAll(l);
		return s;
	}

	private static void ensureGitAssetsArePresent() {
		String gitassets = null;
		try {
			// gitassets = AssetFactory.getGitSource();
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
		String paramsKey = "CaDoodle-Configs";
		String objectKey = "currentVersion";
		String lastVer = ConfigurationDatabase.get(paramsKey, objectKey, "source").toString();
		String nowVer = StudioBuildInfo.getVersion();
		System.out.println("Pervious version was " + lastVer + " and current version is " + nowVer);
		boolean b = !lastVer.contentEquals(nowVer);
		boolean contentEquals = nowVer.contentEquals("source");
		boolean c = b || contentEquals;
		if (c) {
			BowlerStudio.ensureUpdated("https://github.com/CommonWealthRobotics/ExternalEditorsBowlerStudio.git",
					"https://github.com/CommonWealthRobotics/freecad-bowler-cli.git",
					"https://github.com/CommonWealthRobotics/blender-bowler-cli.git",
					"https://github.com/kennetek/gridfinity-rebuilt-openscad.git", gitassets,
					Vitamins.getGitRepoDatabase(), ShapesPallet.getGitULR());
		}
		ConfigurationDatabase.put(paramsKey, objectKey, nowVer);
		Vitamins.loadAllScriptFiles();
		try {
			AssetFactory.loadAllAssets();
		} catch (Exception e) {
			// Auto-generated catch block
			e.printStackTrace();
		}

//		try {
//			ScriptingEngine.gitScriptRun("https://github.com/madhephaestus/CaDoodle-Example-Objects.git",
//					"MakeVitamins.groovy");
//			System.exit(1);
//		} catch (Exception e) {
//			// Auto-generated catch block
//			e.printStackTrace();
//		}
	}

	private static void setUpApprovalWindow() {
		DownloadManager.setDownloadEvents(new IDownloadManagerEvents() {

			@Override
			public void startDownload() {
				SplashManager.renderSplashFrame(0, "Downloading...");
			}

			@Override
			public void finishDownload() {
				SplashManager.closeSplash();
			}
		});
		DownloadManager.setApproval(new IApprovalForDownload() {
			private ButtonType buttonType = null;

			@Override
			public boolean get(String name, String url) {
				buttonType = null;
				boolean isVis = SplashManager.isVisableSplash();
				SplashManager.closeSplash();
				BowlerKernel.runLater(() -> {
					Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
					alert.setTitle("Message");
					alert.setHeaderText("Would you like to add the: " + name + " Plugin?");
					Node root = alert.getDialogPane();
					Stage stage = (Stage) alert.getDialogPane().getScene().getWindow();
					stage.setOnCloseRequest(ev -> alert.hide());
					FontSizeManager.addListener(fontNum -> {
						int tmp = fontNum - 10;
						if (tmp < 12)
							tmp = 12;
						root.setStyle("-fx-font-size: " + tmp + "pt");
						alert.getDialogPane().applyCss();
						alert.getDialogPane().layout();
						stage.sizeToScene();
					});
					Optional<ButtonType> result = alert.showAndWait();
					buttonType = result.get();
					alert.close();
				});

				while (buttonType == null) {
					try {
						Thread.sleep(20);

						SplashManager.closeSplash();
					} catch (InterruptedException e) {
						// Auto-generated catch block
						e.printStackTrace();
					}

				}
				if (isVis)
					SplashManager.renderSplashFrame(0, "Downloading " + name);
				return buttonType.equals(ButtonType.OK);
			}

			@Override
			public void onInstallFail(String url) {
				try {
					BowlerStudio.openExternalWebpage(new URL(url));
				} catch (MalformedURLException e) {
					// Auto-generated catch block
					e.printStackTrace();
				}
			}

			public void notifyOfFailure(String name) {
				BowlerKernel.runLater(() -> {
					Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
					alert.setTitle("Message");
					alert.setHeaderText("FAILED to install " + name + " plugin");
					Node root = alert.getDialogPane();
					Stage stage = (Stage) alert.getDialogPane().getScene().getWindow();
					stage.setOnCloseRequest(ev -> alert.hide());
					FontSizeManager.addListener(fontNum -> {
						int tmp = fontNum - 10;
						if (tmp < 12)
							tmp = 12;
						root.setStyle("-fx-font-size: " + tmp + "pt");
						alert.getDialogPane().applyCss();
						alert.getDialogPane().layout();
						stage.sizeToScene();
					});
					Optional<ButtonType> result = alert.showAndWait();
					buttonType = result.get();
					alert.close();
				});
			}
		});
	}

//	public static Thread getLoadDeps() {
//		return loadDeps;
//	}
//
//	public static void setLoadDeps(Thread loadDeps) {
//		Main.loadDeps = loadDeps;
//	}

}
