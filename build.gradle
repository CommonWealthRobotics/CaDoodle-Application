import java.util.zip.ZipFile
/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1.1/userguide/building_java_projects.html
 */
buildscript {
	repositories {
		gradlePluginPortal()
		mavenCentral()
	}
}


plugins {
	id 'java'
	id 'application'
	id 'eclipse'
	id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
	id 'org.openjfx.javafxplugin' version '0.0.13'apply false
}
// Only apply to the root project
if (project == rootProject) {
	apply plugin: 'com.github.johnrengelman.shadow'
	apply plugin: 'org.openjfx.javafxplugin'
}

allprojects {
	repositories {
		mavenCentral()
		gradlePluginPortal()
	}
}
subprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	eclipse {
		classpath {
			downloadSources = true
			downloadJavadoc = true
			file {
				whenMerged {
					entries.forEach { entry ->
						if (entry.kind == 'lib') {
							entry.entryAttributes['module'] = 'true'
						}
					}
				}
			}
		}
		jdt {
			sourceCompatibility = 1.8
			targetCompatibility = 1.8
		}
	}

	tasks.withType(JavaCompile) {
		options.encoding = 'UTF-8'
		options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
	}
}

subprojects { subproject ->
	subproject.afterEvaluate {
		if (subproject.plugins.hasPlugin('com.github.johnrengelman.shadow')) {
			subproject.tasks.matching { it.name == 'shadowJar' }.all {
				System.out.println("Disabling Shadowjar for "+it)
				it.enabled = false
			}
		}
	}
}



repositories {
	// Use Maven Central for resolving dependencies.
	mavenCentral()
	maven {
		url "https://repository.ow2.org/nexus/content/repositories/public/"
		allowInsecureProtocol = true
	}
}

java {
	//modularity.inferModulePath.set(true)
}

dependencies {
	implementation project(':BowlerStudio:libraries:bowler-script-kernel:java-bowler')
	implementation project(':BowlerStudio:libraries:bowler-script-kernel:GithubPasswordManager:GithubPasswordManager')
	implementation project(':BowlerStudio:libraries:bowler-script-kernel')
	implementation project(':BowlerStudio:libraries:dockfx')
	implementation project(':BowlerStudio')


	// Use JUnit Jupiter for testing.
	testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

	// This dependency is used internally, and not exposed to consumers on their own compile classpath.
	implementation 'com.google.guava:guava:31.1-jre'
	implementation 'com.google.code.gson:gson:2.8.6'
	implementation 'org.openjfx:javafx-controls:17'
	implementation 'org.openjfx:javafx-fxml:17'
	implementation 'org.openjfx:javafx-graphics:17'
	//  Jaxb moved out of system path in Java 9
	implementation 'javax.xml.bind:jaxb-api:2.3.1'
	implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.1'
	implementation('org.fxyz3d:fxyz3d:0.6.0') {
		exclude group: 'eu.mihosoft.vrl.jcsg', module: 'jcsg'
		//eu.mihosoft.vvecmath:vvecmath
		exclude group: 'eu.mihosoft.vvecmath', module: 'vvecmath'
		
	}
}
javafx {
	version = '17' // or whichever version you're using
	modules = [
		'javafx.controls',
		'javafx.fxml',
		'javafx.graphics'] // add other modules as needed
}

tasks.withType(Test) {
	useJUnitPlatform()
	jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
}
def javafxOptions = [
    '--add-exports', 'javafx.graphics/com.sun.javafx.css=ALL-UNNAMED',
    '--add-exports', 'javafx.controls/com.sun.javafx.scene.control.behavior=ALL-UNNAMED',
    '--add-exports', 'javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED',
    '--add-exports', 'javafx.base/com.sun.javafx.event=ALL-UNNAMED',
    '--add-exports', 'javafx.controls/com.sun.javafx.scene.control.skin.resources=ALL-UNNAMED',
    '--add-exports', 'javafx.graphics/com.sun.javafx.util=ALL-UNNAMED',
    '--add-exports', 'javafx.graphics/com.sun.javafx.scene.input=ALL-UNNAMED',
	'--add-opens','javafx.graphics/javafx.scene=ALL-UNNAMED',
	'--add-opens','java.base/java.io=ALL-UNNAMED',
	'--add-opens','java.base/java.lang=ALL-UNNAMED'
]
run {
	jvmArgs = javafxOptions
}
application {
	// Define the main class for the application.
	mainClass = 'com.commonwealthrobotics.Main'
	applicationDefaultJvmArgs =javafxOptions
}

tasks.withType(JavaCompile) {
	options.compilerArgs += [
		'--add-modules', 'ALL-MODULE-PATH',
        '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
        '--add-opens', 'java.base/java.io=ALL-UNNAMED'
	]+javafxOptions
}
tasks.named('test') {
	// Use JUnit Platform for unit tests.
	useJUnitPlatform()
}


shadowJar {
	archiveBaseName.set('CaDoodle-Application')
	archiveClassifier.set('')
	archiveVersion.set('')
	zip64 true
	mergeServiceFiles()
}
jar {
	jar.duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	manifest {
		attributes 'Implementation-Title': 'CaDoodle-Application',
		'Implementation-Version': '0.0.1',
		'Main-Class': 'com.commonwealthrobotics.Main'
	}
}
tasks.withType(Copy) {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
compileJava {
	options.compilerArgs += javafxOptions
}

eclipse {
	classpath {

		downloadSources = true
		downloadJavadoc = true
		file {
			whenMerged { classpath ->
				classpath.entries.removeAll { it.kind == "con" && it.path.contains("org.eclipse.jdt.launching.JRE_CONTAINER") }
                classpath.entries.add(new org.gradle.plugins.ide.eclipse.model.Container("org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-17/"))
				classpath.entries.findAll { it.kind == 'con' && it.path.startsWith('org.eclipse.jdt.launching.JRE_CONTAINER') }.each {
					it.entryAttributes['module'] = 'true'
					def addExports = []
					def addOpens = []
					for(int i=0; i<javafxOptions.size(); i++) {
						if(javafxOptions.get(i).contains("add-opens"))
							addOpens << javafxOptions.get(i+1)
						if(javafxOptions.get(i).contains("add-exports"))
							addExports << javafxOptions.get(i+1)
					}
					it.entryAttributes['add-exports'] = addExports.join(':')
					it.entryAttributes['add-opens'] = addOpens.join(':')
				}
			}
		}
	}
	jdt {
		sourceCompatibility = 1.8
        targetCompatibility = 1.8
		file {
			withProperties { properties ->
				properties.setProperty('org.eclipse.jdt.core.compiler.problem.forbiddenReference', 'ignore')
			}
		}
	}
}